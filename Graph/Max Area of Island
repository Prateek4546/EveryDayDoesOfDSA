class Solution {
   
    public int maxAreaOfIsland(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length; 
        int[][] visted  =new int[n][m];
        int ans = 0;
        int[] delc = {1 , 0 , -1 , 0};
        int[] delr = {0 , 1 , 0 , -1};

          for(int i=0; i<n; i++){
              for(int j=0; j<m; j++){
                 if(grid[i][j] == 1 && visted[i][j] == 0){ 
                  int num =  dfs(i , j , grid , visted , delr , delc );
                  ans = Math.max(ans , num);
                 }
              }
          }
          return ans;
    }
    public static int dfs(int r , int c , int[][] grid ,int[][] visted , int[] delr ,int[] delc ){
        int n = grid.length;
        int m = grid[0].length;
        
        visted[r][c] = 1;
        int ans = 1;
        for(int i=0; i<4; i++)
        {
            int nr = r  + delr[i];
            int nc = c + delc[i];

            if(nr >= 0 && nr < n && nc >= 0 && nc < m && visted[nr][nc] == 0 && grid[nr][nc] == 1)
            {
               ans += dfs(nr , nc , grid , visted  , delr , delc );
            }
        }
        return ans;
    }
}
