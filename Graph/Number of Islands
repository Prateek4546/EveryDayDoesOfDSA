class Solution 
{
    public static void dfs(int r , int c , char[][] grid , int[][] visted , int[] delc , int[] delr)
    {
        visted[r][c] = 1;
         int n = grid.length;
        int m = grid[0].length;
        for(int i=0; i<4; i++)
        {
            int nr = r + delr[i];
            int nc = c + delc[i];
            if(nr >= 0 && nr < n && nc >= 0 && nc < m && visted[nr][nc] != 1 && grid[nr][nc] =='1')
            {
                visted[nr][nc] = 1;
               dfs(nr , nc , grid , visted , delc , delr);
            }
        }
    }
    public int numIslands(char[][] grid) 
    {
        int n = grid.length;
        int m = grid[0].length;
        int[][] visted = new int[n][m];
        int count = 0;
        int[] delr = {1 , 0 , -1 , 0};
        int[] delc = {0 , 1 , 0 , -1};
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                 if(grid[i][j] == '1' && visted[i][j] != 1)
                 {
                     dfs(i , j , grid , visted  , delr , delc);
                     count++;
                 }
            }
        }
        return count;
    }
}
